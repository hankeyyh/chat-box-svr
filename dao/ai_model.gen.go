// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hankeyyh/chat-box-svr/model"
)

func newAiModel(db *gorm.DB, opts ...gen.DOOption) aiModel {
	_aiModel := aiModel{}

	_aiModel.aiModelDo.UseDB(db, opts...)
	_aiModel.aiModelDo.UseModel(&model.AiModel{})

	tableName := _aiModel.aiModelDo.TableName()
	_aiModel.ALL = field.NewAsterisk(tableName)
	_aiModel.Id = field.NewUint64(tableName, "id")
	_aiModel.Name = field.NewString(tableName, "name")
	_aiModel.Enabled = field.NewInt8(tableName, "enabled")
	_aiModel.MaxOutputTokens = field.NewUint64(tableName, "max_output_tokens")
	_aiModel.CreatedAt = field.NewTime(tableName, "created_at")
	_aiModel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_aiModel.fillFieldMap()

	return _aiModel
}

type aiModel struct {
	aiModelDo

	ALL             field.Asterisk
	Id              field.Uint64
	Name            field.String
	Enabled         field.Int8
	MaxOutputTokens field.Uint64
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (a aiModel) Table(newTableName string) *aiModel {
	a.aiModelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aiModel) As(alias string) *aiModel {
	a.aiModelDo.DO = *(a.aiModelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aiModel) updateTableName(table string) *aiModel {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewUint64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Enabled = field.NewInt8(table, "enabled")
	a.MaxOutputTokens = field.NewUint64(table, "max_output_tokens")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *aiModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aiModel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.Id
	a.fieldMap["name"] = a.Name
	a.fieldMap["enabled"] = a.Enabled
	a.fieldMap["max_output_tokens"] = a.MaxOutputTokens
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a aiModel) clone(db *gorm.DB) aiModel {
	a.aiModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aiModel) replaceDB(db *gorm.DB) aiModel {
	a.aiModelDo.ReplaceDB(db)
	return a
}

type aiModelDo struct{ gen.DO }

type IAiModelDo interface {
	gen.SubQuery
	Debug() IAiModelDo
	WithContext(ctx context.Context) IAiModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAiModelDo
	WriteDB() IAiModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAiModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAiModelDo
	Not(conds ...gen.Condition) IAiModelDo
	Or(conds ...gen.Condition) IAiModelDo
	Select(conds ...field.Expr) IAiModelDo
	Where(conds ...gen.Condition) IAiModelDo
	Order(conds ...field.Expr) IAiModelDo
	Distinct(cols ...field.Expr) IAiModelDo
	Omit(cols ...field.Expr) IAiModelDo
	Join(table schema.Tabler, on ...field.Expr) IAiModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAiModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAiModelDo
	Group(cols ...field.Expr) IAiModelDo
	Having(conds ...gen.Condition) IAiModelDo
	Limit(limit int) IAiModelDo
	Offset(offset int) IAiModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAiModelDo
	Unscoped() IAiModelDo
	Create(values ...*model.AiModel) error
	CreateInBatches(values []*model.AiModel, batchSize int) error
	Save(values ...*model.AiModel) error
	First() (*model.AiModel, error)
	Take() (*model.AiModel, error)
	Last() (*model.AiModel, error)
	Find() ([]*model.AiModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AiModel, err error)
	FindInBatches(result *[]*model.AiModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AiModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAiModelDo
	Assign(attrs ...field.AssignExpr) IAiModelDo
	Joins(fields ...field.RelationField) IAiModelDo
	Preload(fields ...field.RelationField) IAiModelDo
	FirstOrInit() (*model.AiModel, error)
	FirstOrCreate() (*model.AiModel, error)
	FindByPage(offset int, limit int) (result []*model.AiModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAiModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByName(name string) (result []model.AiModel, err error)
	GetByID(id uint64) (result []model.AiModel, err error)
	All() (result []model.AiModel, err error)
}

// SELECT * FROM @@table WHERE name = @name
func (a aiModelDo) GetByName(name string) (result []model.AiModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM ai_model WHERE name = ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id = @id LIMIT 1
func (a aiModelDo) GetByID(id uint64) (result []model.AiModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM ai_model WHERE id = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
func (a aiModelDo) All() (result []model.AiModel, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM ai_model ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a aiModelDo) Debug() IAiModelDo {
	return a.withDO(a.DO.Debug())
}

func (a aiModelDo) WithContext(ctx context.Context) IAiModelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aiModelDo) ReadDB() IAiModelDo {
	return a.Clauses(dbresolver.Read)
}

func (a aiModelDo) WriteDB() IAiModelDo {
	return a.Clauses(dbresolver.Write)
}

func (a aiModelDo) Session(config *gorm.Session) IAiModelDo {
	return a.withDO(a.DO.Session(config))
}

func (a aiModelDo) Clauses(conds ...clause.Expression) IAiModelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aiModelDo) Returning(value interface{}, columns ...string) IAiModelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aiModelDo) Not(conds ...gen.Condition) IAiModelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aiModelDo) Or(conds ...gen.Condition) IAiModelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aiModelDo) Select(conds ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aiModelDo) Where(conds ...gen.Condition) IAiModelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aiModelDo) Order(conds ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aiModelDo) Distinct(cols ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aiModelDo) Omit(cols ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aiModelDo) Join(table schema.Tabler, on ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aiModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aiModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aiModelDo) Group(cols ...field.Expr) IAiModelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aiModelDo) Having(conds ...gen.Condition) IAiModelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aiModelDo) Limit(limit int) IAiModelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aiModelDo) Offset(offset int) IAiModelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aiModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAiModelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aiModelDo) Unscoped() IAiModelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aiModelDo) Create(values ...*model.AiModel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aiModelDo) CreateInBatches(values []*model.AiModel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aiModelDo) Save(values ...*model.AiModel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aiModelDo) First() (*model.AiModel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiModel), nil
	}
}

func (a aiModelDo) Take() (*model.AiModel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiModel), nil
	}
}

func (a aiModelDo) Last() (*model.AiModel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiModel), nil
	}
}

func (a aiModelDo) Find() ([]*model.AiModel, error) {
	result, err := a.DO.Find()
	return result.([]*model.AiModel), err
}

func (a aiModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AiModel, err error) {
	buf := make([]*model.AiModel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aiModelDo) FindInBatches(result *[]*model.AiModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aiModelDo) Attrs(attrs ...field.AssignExpr) IAiModelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aiModelDo) Assign(attrs ...field.AssignExpr) IAiModelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aiModelDo) Joins(fields ...field.RelationField) IAiModelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aiModelDo) Preload(fields ...field.RelationField) IAiModelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aiModelDo) FirstOrInit() (*model.AiModel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiModel), nil
	}
}

func (a aiModelDo) FirstOrCreate() (*model.AiModel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiModel), nil
	}
}

func (a aiModelDo) FindByPage(offset int, limit int) (result []*model.AiModel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aiModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aiModelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aiModelDo) Delete(models ...*model.AiModel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aiModelDo) withDO(do gen.Dao) *aiModelDo {
	a.DO = *do.(*gen.DO)
	return a
}
